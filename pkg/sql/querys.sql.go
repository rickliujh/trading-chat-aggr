// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: querys.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBar = `-- name: CreateBar :one
INSERT INTO OHLC1M (
  h, l, o, c, ts
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, h, l, o, c, ts
`

type CreateBarParams struct {
	H  pgtype.Numeric
	L  pgtype.Numeric
	O  pgtype.Numeric
	C  pgtype.Numeric
	Ts pgtype.Timestamp
}

func (q *Queries) CreateBar(ctx context.Context, arg CreateBarParams) (Ohlc1m, error) {
	row := q.db.QueryRow(ctx, createBar,
		arg.H,
		arg.L,
		arg.O,
		arg.C,
		arg.Ts,
	)
	var i Ohlc1m
	err := row.Scan(
		&i.ID,
		&i.H,
		&i.L,
		&i.O,
		&i.C,
		&i.Ts,
	)
	return i, err
}

const deleteBar = `-- name: DeleteBar :exec
DELETE FROM OHLC1M
WHERE id = $1
`

func (q *Queries) DeleteBar(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBar, id)
	return err
}

const listBars = `-- name: ListBars :many
SELECT id, h, l, o, c, ts FROM OHLC1M 
ORDER BY ts
`

func (q *Queries) ListBars(ctx context.Context) ([]Ohlc1m, error) {
	rows, err := q.db.Query(ctx, listBars)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ohlc1m
	for rows.Next() {
		var i Ohlc1m
		if err := rows.Scan(
			&i.ID,
			&i.H,
			&i.L,
			&i.O,
			&i.C,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBar = `-- name: UpdateBar :exec
UPDATE OHLC1M
  set h = $2,
 l = $3,
 o = $4,
 c = $5
WHERE id = $1
`

type UpdateBarParams struct {
	ID int64
	H  pgtype.Numeric
	L  pgtype.Numeric
	O  pgtype.Numeric
	C  pgtype.Numeric
}

func (q *Queries) UpdateBar(ctx context.Context, arg UpdateBarParams) error {
	_, err := q.db.Exec(ctx, updateBar,
		arg.ID,
		arg.H,
		arg.L,
		arg.O,
		arg.C,
	)
	return err
}
