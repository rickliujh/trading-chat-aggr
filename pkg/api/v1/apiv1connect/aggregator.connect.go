// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/aggregator.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rickliujh/trading-chat-aggr/pkg/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AggrName is the fully-qualified name of the Aggr service.
	AggrName = "svc.api.v1.Aggr"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AggrCandlesticks1MStreamProcedure is the fully-qualified name of the Aggr's Candlesticks1MStream
	// RPC.
	AggrCandlesticks1MStreamProcedure = "/svc.api.v1.Aggr/Candlesticks1MStream"
)

// AggrClient is a client for the svc.api.v1.Aggr service.
type AggrClient interface {
	Candlesticks1MStream(context.Context) *connect.BidiStreamForClient[v1.Candlesticks1MStreamRequest, v1.Candlesticks1MStreamResponse]
}

// NewAggrClient constructs a client for the svc.api.v1.Aggr service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAggrClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AggrClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aggrMethods := v1.File_api_v1_aggregator_proto.Services().ByName("Aggr").Methods()
	return &aggrClient{
		candlesticks1MStream: connect.NewClient[v1.Candlesticks1MStreamRequest, v1.Candlesticks1MStreamResponse](
			httpClient,
			baseURL+AggrCandlesticks1MStreamProcedure,
			connect.WithSchema(aggrMethods.ByName("Candlesticks1MStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aggrClient implements AggrClient.
type aggrClient struct {
	candlesticks1MStream *connect.Client[v1.Candlesticks1MStreamRequest, v1.Candlesticks1MStreamResponse]
}

// Candlesticks1MStream calls svc.api.v1.Aggr.Candlesticks1MStream.
func (c *aggrClient) Candlesticks1MStream(ctx context.Context) *connect.BidiStreamForClient[v1.Candlesticks1MStreamRequest, v1.Candlesticks1MStreamResponse] {
	return c.candlesticks1MStream.CallBidiStream(ctx)
}

// AggrHandler is an implementation of the svc.api.v1.Aggr service.
type AggrHandler interface {
	Candlesticks1MStream(context.Context, *connect.BidiStream[v1.Candlesticks1MStreamRequest, v1.Candlesticks1MStreamResponse]) error
}

// NewAggrHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAggrHandler(svc AggrHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aggrMethods := v1.File_api_v1_aggregator_proto.Services().ByName("Aggr").Methods()
	aggrCandlesticks1MStreamHandler := connect.NewBidiStreamHandler(
		AggrCandlesticks1MStreamProcedure,
		svc.Candlesticks1MStream,
		connect.WithSchema(aggrMethods.ByName("Candlesticks1MStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.api.v1.Aggr/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AggrCandlesticks1MStreamProcedure:
			aggrCandlesticks1MStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAggrHandler returns CodeUnimplemented from all methods.
type UnimplementedAggrHandler struct{}

func (UnimplementedAggrHandler) Candlesticks1MStream(context.Context, *connect.BidiStream[v1.Candlesticks1MStreamRequest, v1.Candlesticks1MStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("svc.api.v1.Aggr.Candlesticks1MStream is not implemented"))
}
